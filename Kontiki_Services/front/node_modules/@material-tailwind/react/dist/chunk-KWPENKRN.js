import {
  useTheme
} from "./chunk-FT445BB5.js";
import {
  drawerDismissTriggerTheme,
  drawerOverlayTheme,
  drawerPanelTheme,
  drawerTriggerTheme
} from "./chunk-KLVY2RS4.js";

// src/components/drawer.tsx
import * as React from "react";
import {
  FloatingPortal,
  FloatingOverlay,
  FloatingFocusManager
} from "@floating-ui/react";
import {
  useFloating,
  useClick,
  useRole,
  useDismiss,
  useInteractions,
  useMergeRefs
} from "@floating-ui/react";
import { twMerge } from "tailwind-merge";
import { jsx } from "react/jsx-runtime";
var DrawerContext = React.createContext(
  {}
);
function DrawerRoot({
  open: controlledOpen,
  onOpenChange: setControlledOpen,
  children
}) {
  const [uncontrolledOpen, setUncontrolledOpen] = React.useState(false);
  const open = controlledOpen ?? uncontrolledOpen;
  const setOpen = setControlledOpen ?? setUncontrolledOpen;
  const data = useFloating({
    open,
    onOpenChange: setOpen
  });
  const { context } = data;
  const click = useClick(context, {
    enabled: controlledOpen == null
  });
  const dismiss = useDismiss(context, { outsidePressEvent: "mousedown" });
  const role = useRole(context);
  const interactions = useInteractions([click, dismiss, role]);
  const contextValue = React.useMemo(
    () => ({
      open,
      setOpen,
      ...interactions,
      ...data
    }),
    [open, setOpen, interactions, data]
  );
  return /* @__PURE__ */ jsx(DrawerContext.Provider, { value: contextValue, children });
}
DrawerRoot.displayName = "MaterialTailwind.Drawer";
function DrawerTriggerRoot({ as, className, children, ...props }, ref) {
  const Component = as || "button";
  const contextTheme = useTheme();
  const theme = contextTheme?.drawerTrigger ?? drawerTriggerTheme;
  const { refs, getReferenceProps, open } = React.useContext(DrawerContext);
  const styles = twMerge(theme.baseStyle, className);
  const elementRef = useMergeRefs([refs?.setReference, ref]);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...props,
      ref: elementRef,
      "data-open": open,
      className: styles,
      ...getReferenceProps && getReferenceProps(),
      children
    }
  );
}
DrawerTriggerRoot.displayName = "MaterialTailwind.DrawerTrigger";
var DrawerTrigger = React.forwardRef(DrawerTriggerRoot);
function DrawerOverlayRoot({ className, lockScroll, children, ...props }, ref) {
  const contextTheme = useTheme();
  const theme = contextTheme?.drawerOverlay ?? drawerOverlayTheme;
  const defaultProps = theme?.defaultProps;
  const { open } = React.useContext(DrawerContext);
  lockScroll ??= defaultProps?.lockScroll ?? true;
  const styles = twMerge(theme.baseStyle, className);
  return open ? /* @__PURE__ */ jsx(FloatingPortal, { children: /* @__PURE__ */ jsx(
    FloatingOverlay,
    {
      ...props,
      ref,
      "data-open": open,
      className: styles,
      lockScroll,
      children
    }
  ) }) : null;
}
DrawerOverlayRoot.displayName = "MaterialTailwind.DrawerOverlay";
var DrawerOverlay = React.forwardRef(DrawerOverlayRoot);
function DrawerPanelRoot({
  as,
  className,
  children,
  placement,
  disabled,
  initialFocus,
  returnFocus,
  guards,
  modal,
  visuallyHiddenDismiss,
  closeOnFocusOut,
  order,
  ...props
}, ref) {
  const Component = as || "div";
  const contextTheme = useTheme();
  const theme = contextTheme?.drawerPanel ?? drawerPanelTheme;
  const defaultProps = theme.defaultProps;
  const { context, refs, getFloatingProps, open } = React.useContext(DrawerContext);
  placement ??= defaultProps?.placement ?? "right";
  disabled ??= defaultProps?.disabled ?? false;
  initialFocus ??= defaultProps?.initialFocus ?? 0;
  returnFocus ??= defaultProps?.returnFocus ?? true;
  guards ??= defaultProps?.guards ?? true;
  modal ??= defaultProps?.modal ?? false;
  visuallyHiddenDismiss ??= defaultProps?.visuallyHiddenDismiss ?? true;
  closeOnFocusOut ??= defaultProps?.closeOnFocusOut ?? true;
  order ??= defaultProps?.order ?? ["content"];
  const styles = twMerge(theme.baseStyle, className);
  const elementRef = useMergeRefs([refs?.setFloating, ref]);
  return open ? /* @__PURE__ */ jsx(
    FloatingFocusManager,
    {
      order,
      modal,
      guards,
      disabled,
      returnFocus,
      initialFocus,
      closeOnFocusOut,
      visuallyHiddenDismiss,
      context,
      children: /* @__PURE__ */ jsx(
        Component,
        {
          ...props,
          ref: elementRef,
          className: styles,
          "data-open": open,
          "data-placement": placement,
          ...getFloatingProps && getFloatingProps(),
          children
        }
      )
    }
  ) : null;
}
DrawerPanelRoot.displayName = "MaterialTailwind.DrawerPanel";
var DrawerPanel = React.forwardRef(DrawerPanelRoot);
function DrawerDismissTriggerRoot({ as, className, children, ...props }, ref) {
  const Component = as || "button";
  const contextTheme = useTheme();
  const theme = contextTheme?.drawerDismissTrigger ?? drawerDismissTriggerTheme;
  const { open, setOpen } = React.useContext(DrawerContext);
  const styles = twMerge(theme.baseStyle, className);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...props,
      ref,
      "data-open": open,
      className: styles,
      onClick: (event) => {
        props.onClick?.(event);
        if (setOpen) {
          setOpen(false);
        }
      },
      children
    }
  );
}
DrawerDismissTriggerRoot.displayName = "MaterialTailwind.DrawerDismissTrigger";
var DrawerDismissTrigger = React.forwardRef(
  DrawerDismissTriggerRoot
);
var Drawer = Object.assign(DrawerRoot, {
  Trigger: DrawerTrigger,
  Overlay: DrawerOverlay,
  Panel: DrawerPanel,
  DismissTrigger: DrawerDismissTrigger
});
var drawer_default = Drawer;

export {
  DrawerRoot,
  DrawerTrigger,
  DrawerOverlay,
  DrawerPanel,
  DrawerDismissTrigger,
  Drawer,
  drawer_default
};
