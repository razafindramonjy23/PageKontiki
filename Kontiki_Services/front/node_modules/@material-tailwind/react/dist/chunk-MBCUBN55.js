import {
  useTheme
} from "./chunk-FT445BB5.js";
import {
  sliderRangeTheme,
  sliderTheme,
  sliderThumbTheme,
  sliderTickTheme
} from "./chunk-U4DYNZMF.js";

// src/components/slider.tsx
import * as React from "react";
import { useMergeRefs } from "@floating-ui/react";
import { useRanger } from "@tanstack/react-ranger";
import { twMerge } from "tailwind-merge";
import { jsx } from "react/jsx-runtime";
import { createElement } from "react";
var SliderContext = React.createContext({
  min: 0,
  max: 100,
  step: 1
});
function SliderRootBase({
  as,
  color,
  size,
  disabled,
  min,
  max,
  step,
  value: controlledValue,
  onValueChange: setControlledValue,
  className,
  children,
  ...props
}, ref) {
  const Component = as || "div";
  const sliderRef = React.useRef(null);
  const contextTheme = useTheme();
  const theme = contextTheme?.slider ?? sliderTheme;
  const defaultProps = theme?.defaultProps;
  size ??= defaultProps?.size ?? "md";
  color ??= defaultProps?.color ?? "primary";
  const [uncontrolledValue, setUncontrolledValue] = React.useState([0]);
  const value = controlledValue?.slice(0, 2) ?? uncontrolledValue;
  const onValueChange = setControlledValue ?? setUncontrolledValue;
  const contextValue = React.useMemo(
    () => ({
      size,
      color,
      value,
      onValueChange,
      min: min ?? 0,
      max: max ?? 100,
      step: step ?? 1,
      sliderRef
    }),
    [value, onValueChange, min, max, step, size, color]
  );
  const styles = twMerge(theme.baseStyle, theme["size"][size], className);
  const elementRef = useMergeRefs([sliderRef, ref]);
  return /* @__PURE__ */ jsx(SliderContext.Provider, { value: contextValue, children: /* @__PURE__ */ jsx(Component, { ref: elementRef, ...props, className: styles, children }) });
}
SliderRootBase.displayName = "MaterialTailwind.Slider";
var SliderRoot = React.forwardRef(SliderRootBase);
function SliderRangeRoot({ as, className, children, ...props }, ref) {
  const Component = as || "div";
  const contextTheme = useTheme();
  const theme = contextTheme?.sliderRange ?? sliderRangeTheme;
  const { sliderRef, value, onValueChange, min, max, step, color } = React.useContext(SliderContext);
  const sliderInstance = useRanger({
    getRangerElement: () => sliderRef.current,
    values: value,
    min: min ?? 0,
    max: max ?? 100,
    stepSize: step ?? 1,
    onDrag: (instance) => onValueChange(instance.sortedValues),
    onChange: (instance) => onValueChange(instance.sortedValues)
  });
  return sliderInstance.getSteps().map(({ left, width }, i) => /* @__PURE__ */ jsx(
    Component,
    {
      ref,
      ...props,
      className: twMerge(
        theme.baseStyle,
        value.length > 1 ? i === 0 ? "bg-transparent" : i === 1 ? theme["color"][color ?? "primary"] : "bg-transparent" : i === 0 ? theme["color"][color ?? "primary"] : "bg-transparent",
        className
      ),
      style: {
        position: "absolute",
        left: `${left}%`,
        width: `${width}%`,
        ...props?.style
      },
      children
    }
  ));
}
SliderRangeRoot.displayName = "MaterialTailwind.SliderRange";
var SliderRange = React.forwardRef(SliderRangeRoot);
function SliderThumbRoot({ as, className, children, ...props }, ref) {
  const Component = as || "button";
  const contextTheme = useTheme();
  const theme = contextTheme?.sliderThumb ?? sliderThumbTheme;
  const { sliderRef, value, onValueChange, min, max, step, size, color } = React.useContext(SliderContext);
  const sliderInstance = useRanger({
    getRangerElement: () => sliderRef.current,
    values: value,
    min: min ?? 0,
    max: max ?? 100,
    stepSize: step ?? 1,
    onDrag: (instance) => onValueChange(instance.sortedValues),
    onChange: (instance) => onValueChange(instance.sortedValues)
  });
  const styles = twMerge(
    theme.baseStyle,
    theme["size"][size ?? "md"],
    theme["color"][color ?? "primary"],
    className
  );
  return sliderInstance.handles().map(
    ({
      value: value2,
      onKeyDownHandler,
      onMouseDownHandler,
      onTouchStart,
      isActive
    }, i) => {
      return /* @__PURE__ */ createElement(
        Component,
        {
          ...props,
          ref,
          key: i,
          onKeyDown: (e) => {
            props?.onKeyDown?.(e);
            onKeyDownHandler(e);
          },
          onMouseDown: (e) => {
            props?.onMouseDown?.(e);
            onMouseDownHandler(e);
          },
          onTouchStart: (e) => {
            props?.onTouchStart?.(e);
            onTouchStart(e);
          },
          role: "slider",
          "aria-valuemin": sliderInstance.options.min,
          "aria-valuemax": sliderInstance.options.max,
          "aria-valuenow": value2,
          className: styles,
          style: {
            position: "absolute",
            top: "50%",
            left: `${sliderInstance.getPercentageForValue(value2)}%`,
            zIndex: isActive ? "1" : "0",
            transform: "translate(-50%, -50%)",
            ...props?.style
          }
        }
      );
    }
  );
}
SliderThumbRoot.displayName = "MaterialTailwind.SliderThumb";
var SliderThumb = React.forwardRef(SliderThumbRoot);
function SliderTickRoot({ as, className, children, ...props }, ref) {
  const Component = as || "span";
  const contextTheme = useTheme();
  const theme = contextTheme?.sliderTick ?? sliderTickTheme;
  const { sliderRef, value, onValueChange, min, max, step, size, color } = React.useContext(SliderContext);
  const sliderInstance = useRanger({
    getRangerElement: () => sliderRef.current,
    values: value,
    min: min ?? 0,
    max: max ?? 100,
    stepSize: step ?? 1,
    onDrag: (instance) => onValueChange(instance.sortedValues),
    onChange: (instance) => onValueChange(instance.sortedValues)
  });
  const styles = twMerge(
    theme.baseStyle,
    theme["size"][size ?? "md"],
    theme["color"][color ?? "primary"],
    className
  );
  return sliderInstance.getTicks().map(({ value: value2, key, percentage }) => /* @__PURE__ */ createElement(
    Component,
    {
      ...props,
      key,
      ref,
      className: styles,
      style: {
        left: `${percentage}%`,
        ...props?.style
      }
    },
    value2
  ));
}
SliderTickRoot.displayName = "MaterialTailwind.SliderTick";
var SliderTick = React.forwardRef(SliderTickRoot);
var Slider = Object.assign(SliderRoot, {
  Range: SliderRange,
  Thumb: SliderThumb,
  Tick: SliderTick
});
var slider_default = Slider;

export {
  SliderRoot,
  SliderRange,
  SliderThumb,
  SliderTick,
  Slider,
  slider_default
};
