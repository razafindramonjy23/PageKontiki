import * as React from 'react';
import { BaseProps, SharedProps } from '../types/general.cjs';

type RatingProps<T extends React.ElementType = "div"> = BaseProps<T, {
    color?: SharedProps["color"];
    ratedIcon?: React.ReactNode;
    unratedIcon?: React.ReactNode;
    count?: number;
    value?: number;
    readonly?: boolean;
    onValueChange?: (value: number) => void;
}>;
declare const Rating: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
    color?: SharedProps["color"];
    ratedIcon?: React.ReactNode;
    unratedIcon?: React.ReactNode;
    count?: number | undefined;
    value?: number | undefined;
    readonly?: boolean | undefined;
    onValueChange?: ((value: number) => void) | undefined;
} & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "value" | "onValueChange" | "color" | "ratedIcon" | "unratedIcon" | "count" | "readonly"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;

export { Rating, RatingProps, Rating as default };
