import * as _floating_ui_react from '@floating-ui/react';
import { Placement, OffsetOptions, UseFloatingReturn, useInteractions, FloatingFocusManagerProps } from '@floating-ui/react';
import * as React from 'react';
import { SharedProps, BaseProps } from '../types/general.cjs';

interface SelectContextProps extends Omit<SharedProps, "variant"> {
    isError?: boolean;
    isSuccess?: boolean;
    isPill?: boolean;
    disabled?: boolean;
    placement?: Placement;
    offset?: OffsetOptions;
    activeIndex?: number | null;
    selectedIndex?: number | null;
    refs?: UseFloatingReturn["refs"];
    selected?: {
        value: string;
        element: React.ReactNode;
    };
    setSelected?: React.Dispatch<React.SetStateAction<{
        value: string;
        element: React.ReactNode;
    }>>;
    getItemProps?: ReturnType<typeof useInteractions>["getItemProps"];
    getReferenceProps?: ReturnType<typeof useInteractions>["getReferenceProps"];
    getFloatingProps?: ReturnType<typeof useInteractions>["getFloatingProps"];
    handleSelect?: (index: number | null) => void;
    context?: UseFloatingReturn["context"];
    elementsRef?: React.MutableRefObject<(HTMLElement | string | null)[]>;
    labelsRef?: React.MutableRefObject<({
        value: string;
        element: React.ReactNode;
    } | null)[]>;
    floatingStyles?: UseFloatingReturn["floatingStyles"];
    isOpen?: boolean;
    controlledValue?: string;
}
declare const SelectContext: React.Context<SelectContextProps>;
type SelectProps<T extends React.ElementType = any> = BaseProps<T, {
    isPill?: boolean;
    isError?: boolean;
    isSuccess?: boolean;
    disabled?: boolean;
    placement?: Placement;
    offset?: OffsetOptions;
    value?: string;
    name?: string;
    onValueChange?: (arg: string) => void;
} & Omit<SharedProps, "variant">>;
type SelectTriggerProps<T extends React.ElementType = "button"> = BaseProps<T, {
    indicator?: React.ReactNode;
    placeholder?: string;
    children?: ({ value, element, }: {
        value?: string;
        element?: React.ReactNode;
    }) => React.ReactNode;
}>;
declare const SelectTrigger: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: {
    indicator?: React.ReactNode;
    placeholder?: string | undefined;
    children?: (({ value, element, }: {
        value?: string | undefined;
        element?: React.ReactNode;
    }) => React.ReactNode) | undefined;
} & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "children" | "placeholder" | "indicator"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;
type SelectListProps<T extends React.ElementType = "div"> = BaseProps<T, Omit<FloatingFocusManagerProps, "context" | "children">>;
declare const SelectList: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: Omit<FloatingFocusManagerProps<_floating_ui_react.ReferenceType>, "children" | "context"> & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "order" | "disabled" | "initialFocus" | "guards" | "returnFocus" | "modal" | "visuallyHiddenDismiss" | "closeOnFocusOut"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;
type SelectOptionProps<T extends React.ElementType = "button"> = BaseProps<T, {
    value?: string;
    ripple?: boolean;
    indicator?: React.ReactNode;
}>;
declare const SelectOption: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: {
    value?: string | undefined;
    ripple?: boolean | undefined;
    indicator?: React.ReactNode;
} & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "value" | "ripple" | "indicator"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;
declare const Select: (<T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = any>(props: {
    isPill?: boolean | undefined;
    isError?: boolean | undefined;
    isSuccess?: boolean | undefined;
    disabled?: boolean | undefined;
    placement?: Placement | undefined;
    offset?: OffsetOptions | undefined;
    value?: string | undefined;
    name?: string | undefined;
    onValueChange?: ((arg: string) => void) | undefined;
} & Omit<SharedProps, "variant"> & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "value" | "onValueChange" | "disabled" | "color" | "name" | "size" | "isPill" | "placement" | "isError" | "isSuccess" | "offset"> & {
    ref?: React.Ref<HTMLInputElement> | undefined;
}) => JSX.Element) & {
    Trigger: <T_1 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: {
        indicator?: React.ReactNode;
        placeholder?: string | undefined;
        children?: (({ value, element, }: {
            value?: string | undefined;
            element?: React.ReactNode;
        }) => React.ReactNode) | undefined;
    } & {
        as?: T_1 | undefined;
    } & Omit<React.PropsWithoutRef<React.ComponentProps<T_1>>, "as" | "children" | "placeholder" | "indicator"> & {
        ref?: React.Ref<Element> | undefined;
    }) => JSX.Element;
    List: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: Omit<FloatingFocusManagerProps<_floating_ui_react.ReferenceType>, "children" | "context"> & {
        as?: T | undefined;
    } & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "order" | "disabled" | "initialFocus" | "guards" | "returnFocus" | "modal" | "visuallyHiddenDismiss" | "closeOnFocusOut"> & {
        ref?: React.Ref<Element> | undefined;
    }) => JSX.Element;
    Option: <T_1 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: {
        value?: string | undefined;
        ripple?: boolean | undefined;
        indicator?: React.ReactNode;
    } & {
        as?: T_1 | undefined;
    } & Omit<React.PropsWithoutRef<React.ComponentProps<T_1>>, "as" | "value" | "ripple" | "indicator"> & {
        ref?: React.Ref<Element> | undefined;
    }) => JSX.Element;
};

export { Select, SelectContext, SelectContextProps, SelectList, SelectListProps, SelectOption, SelectOptionProps, SelectProps, SelectTrigger, SelectTriggerProps, Select as default };
