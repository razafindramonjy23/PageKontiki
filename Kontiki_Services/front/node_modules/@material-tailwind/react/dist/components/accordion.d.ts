import * as react_jsx_runtime from 'react/jsx-runtime';
import * as React from 'react';
import { BaseProps } from '../types/general.js';

type accordionType = "single" | "multiple";
interface AccordionContextProps {
    type?: accordionType;
    activeItem?: string | string[];
    setActiveItem?: React.Dispatch<React.SetStateAction<string | string[]>>;
}
declare const AccordionContext: React.Context<AccordionContextProps>;
interface AccordionProps {
    type?: accordionType;
    value?: string | string[];
    defaultValue?: string | string[];
    children: React.ReactNode;
    onValueChange?: React.Dispatch<React.SetStateAction<string | string[]>>;
}
/**
 * @remarks
 * [Documentation](http://www.material-tailwind.com/docs/react/accordion) •
 * [Props Definition](https://www.material-tailwind.com/docs/react/accordion#accordion-props) •
 * [Theming Guide](https://www.material-tailwind.com/docs/react/accordion#accordion-theme)
 */
declare function AccordionRoot({ type, value, defaultValue, onValueChange, children, }: AccordionProps): react_jsx_runtime.JSX.Element;
declare namespace AccordionRoot {
    var displayName: string;
}
declare const AccordionItemContext: React.Context<string>;
type AccordionItemProps<T extends React.ElementType = "div"> = BaseProps<T, {
    value: string;
    disabled?: boolean;
}>;
declare const AccordionItem: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
    value: string;
    disabled?: boolean | undefined;
} & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "value" | "disabled"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;
type AccordionTriggerProps<T extends React.ElementType = "div"> = BaseProps<T>;
declare const AccordionTrigger: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: any) => JSX.Element;
type AccordionContentProps<T extends React.ElementType = "div"> = BaseProps<T>;
declare const AccordionContent: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
declare const Accordion: typeof AccordionRoot & {
    Item: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
        value: string;
        disabled?: boolean | undefined;
    } & {
        as?: T | undefined;
    } & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "value" | "disabled"> & {
        ref?: React.Ref<Element> | undefined;
    }) => JSX.Element;
    Trigger: <T_1 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: any) => JSX.Element;
    Content: <T_2 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
};

export { Accordion, AccordionContent, AccordionContentProps, AccordionContext, AccordionContextProps, AccordionItem, AccordionItemContext, AccordionItemProps, AccordionProps, AccordionRoot, AccordionTrigger, AccordionTriggerProps, Accordion as default };
