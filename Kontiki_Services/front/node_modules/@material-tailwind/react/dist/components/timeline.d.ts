import * as React from 'react';
import { SharedProps, BaseProps } from '../types/general.js';

type Orientation = "horizontal" | "vertical";
type Mode = "stepper" | "timeline";
interface TimelineContextProps {
    value?: string;
    setValue?: (e: string) => void;
    color?: SharedProps["color"];
    orientation?: Orientation;
    mode?: Mode;
    parentRef?: React.RefObject<HTMLElement>;
}
declare const TimelineContext: React.Context<TimelineContextProps>;
type TimelineProps<T extends React.ElementType = "div"> = BaseProps<T, {
    value?: string;
    defaultValue?: string;
    onValueChange?: (e: string) => void;
    color: SharedProps["color"];
    orientation?: Orientation;
    mode?: Mode;
}>;
declare const TimelineRoot: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
    value?: string | undefined;
    defaultValue?: string | undefined;
    onValueChange?: ((e: string) => void) | undefined;
    color: SharedProps["color"];
    orientation?: Orientation | undefined;
    mode?: Mode | undefined;
} & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "value" | "defaultValue" | "onValueChange" | "color" | "orientation" | "mode"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;
type TimelineItemProps<T extends React.ElementType = "div"> = BaseProps<T, {
    value?: string;
    disabled?: boolean;
}>;
declare const TimelineItem: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
    value?: string | undefined;
    disabled?: boolean | undefined;
} & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "value" | "disabled"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;
type TimelineHeaderProps<T extends React.ElementType = "div"> = BaseProps<T>;
declare const TimelineHeader: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
type TimelineIconProps<T extends React.ElementType = "span"> = BaseProps<T>;
declare const TimelineIcon: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: any) => JSX.Element;
type TimelineSeparatorProps<T extends React.ElementType = "div"> = BaseProps<T>;
declare const TimelineSeparator: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
type TimelineBodyProps<T extends React.ElementType = "div"> = BaseProps<T>;
declare const TimelineBody: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
declare const Timeline: (<T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
    value?: string | undefined;
    defaultValue?: string | undefined;
    onValueChange?: ((e: string) => void) | undefined;
    color: SharedProps["color"];
    orientation?: Orientation | undefined;
    mode?: Mode | undefined;
} & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "value" | "defaultValue" | "onValueChange" | "color" | "orientation" | "mode"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element) & {
    Item: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
        value?: string | undefined;
        disabled?: boolean | undefined;
    } & {
        as?: T | undefined;
    } & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "value" | "disabled"> & {
        ref?: React.Ref<Element> | undefined;
    }) => JSX.Element;
    Icon: <T_1 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: any) => JSX.Element;
    Body: <T_2 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
    Header: <T_3 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
    Separator: <T_4 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
};

export { Timeline, TimelineBody, TimelineBodyProps, TimelineContext, TimelineContextProps, TimelineHeader, TimelineHeaderProps, TimelineIcon, TimelineIconProps, TimelineItem, TimelineItemProps, TimelineProps, TimelineRoot, TimelineSeparator, TimelineSeparatorProps };
