import * as React from 'react';
import { SharedProps, BaseProps } from '../types/general.cjs';

interface ChipContextProps extends SharedProps {
    open?: boolean;
    setOpen?: React.Dispatch<React.SetStateAction<boolean>>;
}
declare const ChipContext: React.Context<ChipContextProps>;
type ChipProps<T extends React.ElementType = "div"> = BaseProps<T, {
    open?: boolean;
    onOpenChange?: React.Dispatch<React.SetStateAction<boolean>>;
} & SharedProps>;
declare const ChipRoot: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
    open?: boolean | undefined;
    onOpenChange?: React.Dispatch<React.SetStateAction<boolean>> | undefined;
} & SharedProps & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | keyof SharedProps | "open" | "onOpenChange"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;
type ChipLabelProps<T extends React.ElementType = "span"> = BaseProps<T>;
declare const ChipLabel: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: any) => JSX.Element;
type ChipIconProps<T extends React.ElementType = "span"> = BaseProps<T>;
declare const ChipIcon: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: any) => JSX.Element;
type ChipDismissTriggerProps<T extends React.ElementType = "button"> = BaseProps<T, {
    ripple?: boolean;
}>;
declare const ChipDismissTrigger: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: {
    ripple?: boolean | undefined;
} & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "ripple"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;
declare const Chip: (<T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
    open?: boolean | undefined;
    onOpenChange?: React.Dispatch<React.SetStateAction<boolean>> | undefined;
} & SharedProps & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | keyof SharedProps | "open" | "onOpenChange"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element) & {
    Icon: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: any) => JSX.Element;
    Label: <T_1 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: any) => JSX.Element;
    DismissTrigger: <T_2 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: {
        ripple?: boolean | undefined;
    } & {
        as?: T_2 | undefined;
    } & Omit<React.PropsWithoutRef<React.ComponentProps<T_2>>, "as" | "ripple"> & {
        ref?: React.Ref<Element> | undefined;
    }) => JSX.Element;
};

export { Chip, ChipContext, ChipContextProps, ChipDismissTrigger, ChipDismissTriggerProps, ChipIcon, ChipIconProps, ChipLabel, ChipLabelProps, ChipProps, ChipRoot, Chip as default };
