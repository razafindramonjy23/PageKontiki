import * as React from 'react';
import { SharedProps, BaseProps } from '../types/general.cjs';

interface SliderContextProps extends Omit<SharedProps, "variant"> {
    sliderRef: React.RefObject<HTMLElement>;
    value: ReadonlyArray<number>;
    onValueChange: React.Dispatch<React.SetStateAction<readonly number[]>>;
    min?: number;
    max?: number;
    step?: number;
}
type SliderProps<T extends React.ElementType = "div"> = BaseProps<T, {
    value: ReadonlyArray<number>;
    onValueChange: React.Dispatch<React.SetStateAction<readonly number[]>>;
    min?: number;
    max?: number;
    step?: number;
    disabled?: boolean;
} & Omit<SharedProps, "variant">>;
declare const SliderRoot: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
    value: ReadonlyArray<number>;
    onValueChange: React.Dispatch<React.SetStateAction<readonly number[]>>;
    min?: number | undefined;
    max?: number | undefined;
    step?: number | undefined;
    disabled?: boolean | undefined;
} & Omit<SharedProps, "variant"> & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "value" | "onValueChange" | "disabled" | "color" | "size" | "step" | "max" | "min"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;
type SliderRangeProps<T extends React.ElementType = "div"> = BaseProps<T>;
declare const SliderRange: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
type SliderThumbProps<T extends React.ElementType = "button"> = BaseProps<T>;
declare const SliderThumb: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
type SliderTickProps<T extends React.ElementType = "span"> = BaseProps<T>;
declare const SliderTick: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
declare const Slider: (<T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
    value: ReadonlyArray<number>;
    onValueChange: React.Dispatch<React.SetStateAction<readonly number[]>>;
    min?: number | undefined;
    max?: number | undefined;
    step?: number | undefined;
    disabled?: boolean | undefined;
} & Omit<SharedProps, "variant"> & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "value" | "onValueChange" | "disabled" | "color" | "size" | "step" | "max" | "min"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element) & {
    Range: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
    Thumb: <T_1 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
    Tick: <T_2 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
};

export { Slider, SliderContextProps, SliderProps, SliderRange, SliderRangeProps, SliderRoot, SliderThumb, SliderThumbProps, SliderTick, SliderTickProps, Slider as default };
