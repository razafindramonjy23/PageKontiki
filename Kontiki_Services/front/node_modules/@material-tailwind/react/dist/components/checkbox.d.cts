import * as React from 'react';
import { SharedProps, BaseProps } from '../types/general.cjs';

interface CheckboxContextProps {
    disabled?: boolean;
    checked?: boolean;
    color?: SharedProps["color"];
}
declare const CheckboxContext: React.Context<CheckboxContextProps>;
type CheckboxProps<T extends React.ElementType = "input"> = BaseProps<T, {
    disabled?: boolean;
} & Omit<SharedProps, "variant" | "size">>;
declare const CheckboxRoot: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "input">(props: {
    disabled?: boolean | undefined;
} & Omit<SharedProps, "size" | "variant"> & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "disabled" | "color"> & {
    ref?: React.Ref<HTMLLabelElement> | undefined;
}) => JSX.Element;
type CheckboxIndicatorProps<T extends React.ElementType = "span"> = BaseProps<T>;
declare const CheckboxIndicator: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: any) => JSX.Element;
declare const Checkbox: (<T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "input">(props: {
    disabled?: boolean | undefined;
} & Omit<SharedProps, "size" | "variant"> & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "disabled" | "color"> & {
    ref?: React.Ref<HTMLLabelElement> | undefined;
}) => JSX.Element) & {
    Indicator: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: any) => JSX.Element;
};

export { Checkbox, CheckboxContext, CheckboxContextProps, CheckboxIndicator, CheckboxIndicatorProps, CheckboxProps, CheckboxRoot, Checkbox as default };
