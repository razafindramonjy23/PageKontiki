import * as React from 'react';
import { SharedProps, BaseProps } from '../types/general.js';

interface BadgeContextProps extends Omit<SharedProps, "size" | "variant"> {
    overlap?: "circular" | "square";
    placement?: "top-start" | "top-end" | "bottom-start" | "bottom-end";
}
declare const BadgeContext: React.Context<BadgeContextProps>;
type BadgeProps<T extends React.ElementType = "div"> = BaseProps<T, {
    overlap?: "circular" | "square";
    placement?: "top-start" | "top-end" | "bottom-start" | "bottom-end";
} & Omit<SharedProps, "size" | "variant">>;
type BadgeContentProps<T extends React.ElementType = "div"> = BaseProps<T>;
declare const BadgeContent: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
type BadgeIndicatorProps<T extends React.ElementType = "span"> = BaseProps<T>;
declare const BadgeIndicator: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: any) => JSX.Element;
declare const Badge: (<T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
    overlap?: "circular" | "square" | undefined;
    placement?: "top-end" | "bottom-start" | "bottom-end" | "top-start" | undefined;
} & Omit<SharedProps, "size" | "variant"> & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "color" | "placement" | "overlap"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element) & {
    Content: <T_1 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
    Indicator: <T_2 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: any) => JSX.Element;
};

export { Badge, BadgeContent, BadgeContentProps, BadgeContext, BadgeContextProps, BadgeIndicator, BadgeIndicatorProps, BadgeProps, Badge as default };
