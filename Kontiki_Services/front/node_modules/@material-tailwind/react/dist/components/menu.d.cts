import * as _floating_ui_react from '@floating-ui/react';
import { useListItem, Placement, OffsetOptions, FloatingFocusManagerProps, UseFloatingReturn, useInteractions } from '@floating-ui/react';
import * as react_jsx_runtime from 'react/jsx-runtime';
import * as React from 'react';
import { BaseProps } from '../types/general.cjs';

type FloatingType = Partial<UseFloatingReturn> & Partial<ReturnType<typeof useInteractions>>;
interface MenuContextProps extends FloatingType {
    open?: boolean;
    setOpen?: React.Dispatch<React.SetStateAction<boolean>>;
    item?: ReturnType<typeof useListItem>;
    isNested?: boolean;
    activeIndex?: number | null;
    elementsRef?: React.MutableRefObject<(HTMLButtonElement | null)[]>;
    labelsRef?: React.MutableRefObject<React.ReactNode[]>;
}
declare const MenuContext: React.Context<MenuContextProps>;
interface MenuProps {
    open?: boolean;
    onOpenChange?: React.Dispatch<React.SetStateAction<boolean>>;
    placement?: Placement;
    offset?: OffsetOptions;
    children: React.ReactNode;
}
/**
 * @remarks
 * [Documentation](http://www.material-tailwind.com/docs/react/menu) •
 * [Props Definition](https://www.material-tailwind.com/docs/react/menu#menu-props) •
 * [Theming Guide](https://www.material-tailwind.com/docs/react/menu#menu-theme)
 */
declare function MenuRoot(props: MenuProps): react_jsx_runtime.JSX.Element;
declare namespace MenuRoot {
    var displayName: string;
}
type MenuTriggerProps<T extends React.ElementType = "button"> = BaseProps<T>;
declare const MenuTrigger: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: any) => JSX.Element;
type MenuContentProps<T extends React.ElementType = "div"> = BaseProps<T, Omit<FloatingFocusManagerProps, "context" | "children">>;
declare const MenuContent: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: Omit<FloatingFocusManagerProps<_floating_ui_react.ReferenceType>, "children" | "context"> & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "order" | "disabled" | "initialFocus" | "guards" | "returnFocus" | "modal" | "visuallyHiddenDismiss" | "closeOnFocusOut"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;
type MenuItemProps<T extends React.ElementType = "button"> = BaseProps<T, {
    ripple?: boolean;
    disabled?: boolean;
    closeOnClick?: boolean;
}>;
declare const MenuItem: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: {
    ripple?: boolean | undefined;
    disabled?: boolean | undefined;
    closeOnClick?: boolean | undefined;
} & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "disabled" | "ripple" | "closeOnClick"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;
declare const Menu: typeof MenuRoot & {
    Trigger: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: any) => JSX.Element;
    Content: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: Omit<FloatingFocusManagerProps<_floating_ui_react.ReferenceType>, "children" | "context"> & {
        as?: T | undefined;
    } & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "order" | "disabled" | "initialFocus" | "guards" | "returnFocus" | "modal" | "visuallyHiddenDismiss" | "closeOnFocusOut"> & {
        ref?: React.Ref<Element> | undefined;
    }) => JSX.Element;
    Item: <T_1 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: {
        ripple?: boolean | undefined;
        disabled?: boolean | undefined;
        closeOnClick?: boolean | undefined;
    } & {
        as?: T_1 | undefined;
    } & Omit<React.PropsWithoutRef<React.ComponentProps<T_1>>, "as" | "disabled" | "ripple" | "closeOnClick"> & {
        ref?: React.Ref<Element> | undefined;
    }) => JSX.Element;
};

export { Menu, MenuContent, MenuContentProps, MenuContext, MenuContextProps, MenuItem, MenuItemProps, MenuProps, MenuRoot, MenuTrigger, MenuTriggerProps, Menu as default };
