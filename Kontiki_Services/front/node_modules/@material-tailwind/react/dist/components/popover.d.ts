import * as _floating_ui_react from '@floating-ui/react';
import { Placement, OffsetOptions, FloatingFocusManagerProps, UseFloatingReturn, useInteractions } from '@floating-ui/react';
import * as react_jsx_runtime from 'react/jsx-runtime';
import * as React from 'react';
import { BaseProps } from '../types/general.js';

type FloatingType = Partial<UseFloatingReturn> & Partial<ReturnType<typeof useInteractions>>;
interface PopoverContextProps extends FloatingType {
    open?: boolean;
    setOpen?: React.Dispatch<React.SetStateAction<boolean>>;
    arrowRef?: React.MutableRefObject<null>;
}
declare const PopoverContext: React.Context<PopoverContextProps>;
interface PopoverProps {
    open?: boolean;
    onOpenChange?: React.Dispatch<React.SetStateAction<boolean>>;
    placement?: Placement;
    offset?: OffsetOptions;
    children: React.ReactNode;
}
/**
 * @remarks
 * [Documentation](http://www.material-tailwind.com/docs/react/popover) •
 * [Props Definition](https://www.material-tailwind.com/docs/react/popover#popover-props) •
 * [Theming Guide](https://www.material-tailwind.com/docs/react/popover#popover-theme)
 */
declare function PopoverRoot({ open: controlledOpen, onOpenChange: setControlledOpen, placement, offset, children, }: PopoverProps): react_jsx_runtime.JSX.Element;
declare namespace PopoverRoot {
    var displayName: string;
}
type PopoverTriggerProps<T extends React.ElementType = "button"> = BaseProps<T>;
declare const PopoverTrigger: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: any) => JSX.Element;
type PopoverContentProps<T extends React.ElementType = "div"> = BaseProps<T, Omit<FloatingFocusManagerProps, "context" | "children">>;
declare const PopoverContent: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: Omit<FloatingFocusManagerProps<_floating_ui_react.ReferenceType>, "children" | "context"> & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "order" | "disabled" | "initialFocus" | "guards" | "returnFocus" | "modal" | "visuallyHiddenDismiss" | "closeOnFocusOut"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;
type PopoverArrowProps<T extends React.ElementType = "span"> = BaseProps<T>;
declare const PopoverArrow: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: any) => JSX.Element;
declare const Popover: typeof PopoverRoot & {
    Trigger: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: any) => JSX.Element;
    Content: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: Omit<FloatingFocusManagerProps<_floating_ui_react.ReferenceType>, "children" | "context"> & {
        as?: T | undefined;
    } & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "order" | "disabled" | "initialFocus" | "guards" | "returnFocus" | "modal" | "visuallyHiddenDismiss" | "closeOnFocusOut"> & {
        ref?: React.Ref<Element> | undefined;
    }) => JSX.Element;
    Arrow: <T_1 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: any) => JSX.Element;
};

export { Popover, PopoverArrow, PopoverArrowProps, PopoverContent, PopoverContentProps, PopoverContext, PopoverContextProps, PopoverProps, PopoverRoot, PopoverTrigger, PopoverTriggerProps, Popover as default };
