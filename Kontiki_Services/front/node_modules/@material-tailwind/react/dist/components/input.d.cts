import * as React from 'react';
import { SharedProps, BaseProps } from '../types/general.cjs';

interface InputContextProps extends Omit<SharedProps, "variant"> {
    iconPlacement?: "start" | "end" | string;
    isIconDefined?: boolean;
    isError?: boolean;
    isSuccess?: boolean;
    disabled?: boolean;
    setIconPlacement: React.Dispatch<React.SetStateAction<string>>;
    setIsIconDefined: React.Dispatch<React.SetStateAction<boolean>>;
}
declare const InputContext: React.Context<InputContextProps>;
type InputProps<T extends React.ElementType = "div"> = BaseProps<T, {
    isPill?: boolean;
    isError?: boolean;
    isSuccess?: boolean;
    disabled?: boolean;
} & Omit<SharedProps, "variant">>;
declare const InputRoot: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
    isPill?: boolean | undefined;
    isError?: boolean | undefined;
    isSuccess?: boolean | undefined;
    disabled?: boolean | undefined;
} & Omit<SharedProps, "variant"> & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "disabled" | "color" | "size" | "isPill" | "isError" | "isSuccess"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;
type InputFieldProps<T extends React.ElementType = "input"> = Omit<BaseProps<T>, "as">;
declare const InputField: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "input">(props: InputFieldProps<T_1> & {
    ref?: React.Ref<HTMLInputElement> | undefined;
}) => JSX.Element;
type InputIconProps<T extends React.ElementType = "span"> = BaseProps<T, {
    placement?: "start" | "end";
}>;
declare const InputIcon: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: {
    placement?: "start" | "end" | undefined;
} & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "placement"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;
declare const Input: (<T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
    isPill?: boolean | undefined;
    isError?: boolean | undefined;
    isSuccess?: boolean | undefined;
    disabled?: boolean | undefined;
} & Omit<SharedProps, "variant"> & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "disabled" | "color" | "size" | "isPill" | "isError" | "isSuccess"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element) & {
    Field: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "input">(props: InputFieldProps<T_1> & {
        ref?: React.Ref<HTMLInputElement> | undefined;
    }) => JSX.Element;
    Icon: <T_2 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: {
        placement?: "start" | "end" | undefined;
    } & {
        as?: T_2 | undefined;
    } & Omit<React.PropsWithoutRef<React.ComponentProps<T_2>>, "as" | "placement"> & {
        ref?: React.Ref<Element> | undefined;
    }) => JSX.Element;
};

export { Input, InputContext, InputContextProps, InputField, InputFieldProps, InputIcon, InputIconProps, InputProps, InputRoot, Input as default };
