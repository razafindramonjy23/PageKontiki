import * as react_jsx_runtime from 'react/jsx-runtime';
import * as React from 'react';
import { Placement, OffsetOptions, UseFloatingReturn, useInteractions } from '@floating-ui/react';
import { BaseProps } from '../types/general.cjs';

type FloatingType = Partial<UseFloatingReturn> & Partial<ReturnType<typeof useInteractions>>;
interface TooltipContextProps extends FloatingType {
    open?: boolean;
    setOpen?: React.Dispatch<React.SetStateAction<boolean>>;
    arrowRef?: React.MutableRefObject<null>;
}
declare const TooltipContext: React.Context<TooltipContextProps>;
interface TooltipProps {
    open?: boolean;
    onOpenChange?: React.Dispatch<React.SetStateAction<boolean>>;
    placement?: Placement;
    offset?: OffsetOptions;
    interactive?: boolean;
    children: React.ReactNode;
}
/**
 * @remarks
 * [Documentation](http://www.material-tailwind.com/docs/react/tooltip) •
 * [Props Definition](https://www.material-tailwind.com/docs/react/tooltip#tooltip-props) •
 * [Theming Guide](https://www.material-tailwind.com/docs/react/tooltip#tooltip-theme)
 */
declare function TooltipRoot({ open: controlledOpen, onOpenChange: setControlledOpen, placement, offset, interactive, children, }: TooltipProps): react_jsx_runtime.JSX.Element;
declare namespace TooltipRoot {
    var displayName: string;
}
type TooltipTriggerProps<T extends React.ElementType = "button"> = BaseProps<T>;
declare const TooltipTrigger: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: any) => JSX.Element;
type TooltipContentProps<T extends React.ElementType = "div"> = BaseProps<T>;
declare const TooltipContent: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
type TooltipArrowProps<T extends React.ElementType = "span"> = BaseProps<T>;
declare const TooltipArrow: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: any) => JSX.Element;
declare const Tooltip: typeof TooltipRoot & {
    Trigger: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: any) => JSX.Element;
    Content: <T_1 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
    Arrow: <T_2 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: any) => JSX.Element;
};

export { Tooltip, TooltipArrow, TooltipArrowProps, TooltipContent, TooltipContentProps, TooltipContext, TooltipContextProps, TooltipProps, TooltipRoot, TooltipTrigger, TooltipTriggerProps, Tooltip as default };
