import * as _floating_ui_react from '@floating-ui/react';
import { FloatingFocusManagerProps, UseFloatingReturn, useInteractions } from '@floating-ui/react';
import * as react_jsx_runtime from 'react/jsx-runtime';
import * as React from 'react';
import { BaseProps, SharedProps } from '../types/general.cjs';

type size = "xs" | SharedProps["size"] | "xl" | "screen";
type FloatingType = Partial<UseFloatingReturn> & Partial<ReturnType<typeof useInteractions>>;
interface DialogContextProps extends FloatingType {
    size?: size;
    open?: boolean;
    setOpen?: React.Dispatch<React.SetStateAction<boolean>>;
}
interface DialogRootProps {
    size?: size;
    open?: boolean;
    onOpenChange?: React.Dispatch<React.SetStateAction<boolean>>;
    children: React.ReactNode;
}
/**
 * @remarks
 * [Documentation](http://www.material-tailwind.com/docs/react/dialog) •
 * [Props Definition](https://www.material-tailwind.com/docs/react/dialog#dialog-props) •
 * [Theming Guide](https://www.material-tailwind.com/docs/react/dialog#dialog-theme)
 */
declare function DialogRoot({ size, open: controlledOpen, onOpenChange: setControlledOpen, children, }: DialogRootProps): react_jsx_runtime.JSX.Element;
declare namespace DialogRoot {
    var displayName: string;
}
type DialogTriggerProps<T extends React.ElementType = "button"> = BaseProps<T>;
declare const DialogTrigger: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: any) => JSX.Element;
type DialogOverlayProps<T extends React.ElementType = "div"> = Omit<BaseProps<T, {
    lockScroll?: boolean;
}>, "as">;
declare const DialogOverlay: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: DialogOverlayProps<T> & {
    ref?: React.Ref<HTMLDivElement> | undefined;
}) => JSX.Element;
type DialogContentProps<T extends React.ElementType = "div"> = BaseProps<T, Omit<FloatingFocusManagerProps, "context" | "children">>;
declare const DialogContent: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: Omit<FloatingFocusManagerProps<_floating_ui_react.ReferenceType>, "children" | "context"> & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "order" | "disabled" | "initialFocus" | "guards" | "returnFocus" | "modal" | "visuallyHiddenDismiss" | "closeOnFocusOut"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;
type DialogDismissTriggerProps<T extends React.ElementType = "button"> = BaseProps<T>;
declare const DialogDismissTrigger: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: any) => JSX.Element;
declare const Dialog: typeof DialogRoot & {
    Trigger: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: any) => JSX.Element;
    Overlay: <T_1 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: DialogOverlayProps<T_1> & {
        ref?: React.Ref<HTMLDivElement> | undefined;
    }) => JSX.Element;
    Content: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: Omit<FloatingFocusManagerProps<_floating_ui_react.ReferenceType>, "children" | "context"> & {
        as?: T | undefined;
    } & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "order" | "disabled" | "initialFocus" | "guards" | "returnFocus" | "modal" | "visuallyHiddenDismiss" | "closeOnFocusOut"> & {
        ref?: React.Ref<Element> | undefined;
    }) => JSX.Element;
    DismissTrigger: <T_1 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: any) => JSX.Element;
};

export { Dialog, DialogContent, DialogContentProps, DialogContextProps, DialogDismissTrigger, DialogDismissTriggerProps, DialogOverlay, DialogOverlayProps, DialogRoot, DialogRootProps, DialogTrigger, DialogTriggerProps, Dialog as default };
