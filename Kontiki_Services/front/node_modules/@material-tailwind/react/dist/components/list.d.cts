import * as React from 'react';
import { BaseProps } from '../types/general.cjs';

/**
 * @remarks
 * [Documentation](http://www.material-tailwind.com/docs/react/list) •
 * [Props Definition](https://www.material-tailwind.com/docs/react/list#list-props) •
 * [Theming Guide](https://www.material-tailwind.com/docs/react/list#list-theme)
 */
type ListProps<T extends React.ElementType = "ul"> = BaseProps<T>;
declare const ListRoot: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "ul">(props: any) => JSX.Element;
type ListItemProps<T extends React.ElementType = "li"> = BaseProps<T, {
    disabled?: boolean;
    selected?: boolean;
    ripple?: boolean;
}>;
declare const ListItem: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "li">(props: {
    disabled?: boolean | undefined;
    selected?: boolean | undefined;
    ripple?: boolean | undefined;
} & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "disabled" | "ripple" | "selected"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;
type ListItemStartProps<T extends React.ElementType = "span"> = BaseProps<T>;
declare const ListItemStart: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: any) => JSX.Element;
type ListItemEndProps<T extends React.ElementType = "span"> = BaseProps<T>;
declare const ListItemEnd: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: ListItemEndProps & {
    ref?: React.Ref<Element>;
}) => JSX.Element;
declare const List: (<T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "ul">(props: any) => JSX.Element) & {
    Item: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "li">(props: {
        disabled?: boolean | undefined;
        selected?: boolean | undefined;
        ripple?: boolean | undefined;
    } & {
        as?: T | undefined;
    } & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "disabled" | "ripple" | "selected"> & {
        ref?: React.Ref<Element> | undefined;
    }) => JSX.Element;
    ItemStart: <T_1 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: any) => JSX.Element;
    ItemEnd: <T_2 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: ListItemEndProps & {
        ref?: React.Ref<Element>;
    }) => JSX.Element;
};

export { List, ListItem, ListItemEnd, ListItemEndProps, ListItemProps, ListItemStart, ListItemStartProps, ListProps, ListRoot, List as default };
