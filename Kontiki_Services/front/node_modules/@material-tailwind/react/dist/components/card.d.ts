import * as React from 'react';
import { BaseProps, SharedProps } from '../types/general.js';

type CardProps<T extends React.ElementType = "div"> = BaseProps<T, {
    color?: "default" | SharedProps["color"];
} & Omit<SharedProps, "size" | "color">>;
declare const CardRoot: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
    color?: "default" | SharedProps["color"];
} & Omit<SharedProps, "color" | "size"> & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "color" | "variant"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;
type CardHeaderProps<T extends React.ElementType = "div"> = BaseProps<T>;
declare const CardHeader: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
type CardBodyProps<T extends React.ElementType = "div"> = BaseProps<T>;
declare const CardBody: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
type CardFooterProps<T extends React.ElementType = "div"> = BaseProps<T>;
declare const CardFooter: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
declare const Card: (<T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
    color?: "default" | SharedProps["color"];
} & Omit<SharedProps, "color" | "size"> & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "color" | "variant"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element) & {
    Header: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
    Body: <T_1 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
    Footer: <T_2 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
};

export { Card, CardBody, CardBodyProps, CardFooter, CardFooterProps, CardHeader, CardHeaderProps, CardProps, CardRoot, Card as default };
