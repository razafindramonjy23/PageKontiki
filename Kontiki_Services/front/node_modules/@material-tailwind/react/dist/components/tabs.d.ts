import * as React from 'react';
import { BaseProps } from '../types/general.js';

type orientation = "horizontal" | "vertical";
type rect = {
    clientWidth: number;
    clientHeight: number;
    offsetLeft: number;
    offsetTop: number;
};
interface TabsContext {
    orientation?: orientation;
    activeTab?: string;
    setActiveTab?: React.Dispatch<React.SetStateAction<string>>;
    indicatorRect?: rect;
    setIndicatorRect?: React.Dispatch<React.SetStateAction<rect>>;
}
type TabsProps<T extends React.ElementType = "div"> = BaseProps<T, {
    value?: string;
    defaultValue?: string;
    orientation?: orientation;
    onValueChange?: React.Dispatch<React.SetStateAction<string>>;
}>;
declare const TabsRoot: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
    value?: string | undefined;
    defaultValue?: string | undefined;
    orientation?: orientation | undefined;
    onValueChange?: React.Dispatch<React.SetStateAction<string>> | undefined;
} & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "value" | "defaultValue" | "onValueChange" | "orientation"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;
type TabsListProps<T extends React.ElementType = "div"> = BaseProps<T>;
declare const TabsList: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
type TabsTriggerProps<T extends React.ElementType = "button"> = BaseProps<T, {
    value: string;
}>;
declare const TabsTrigger: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: {
    value: string;
} & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "value"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;
type TabsPanelProps<T extends React.ElementType = "div"> = BaseProps<T, {
    value: string;
}>;
declare const TabsPanel: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
    value: string;
} & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "value"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;
type TabsTriggerIndicatorProps<T extends React.ElementType = "span"> = BaseProps<T>;
declare const TabsTriggerIndicator: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: any) => JSX.Element;
declare const Tabs: (<T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
    value?: string | undefined;
    defaultValue?: string | undefined;
    orientation?: orientation | undefined;
    onValueChange?: React.Dispatch<React.SetStateAction<string>> | undefined;
} & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "value" | "defaultValue" | "onValueChange" | "orientation"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element) & {
    List: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
    Trigger: <T_1 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: {
        value: string;
    } & {
        as?: T_1 | undefined;
    } & Omit<React.PropsWithoutRef<React.ComponentProps<T_1>>, "as" | "value"> & {
        ref?: React.Ref<Element> | undefined;
    }) => JSX.Element;
    Panel: <T_2 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
        value: string;
    } & {
        as?: T_2 | undefined;
    } & Omit<React.PropsWithoutRef<React.ComponentProps<T_2>>, "as" | "value"> & {
        ref?: React.Ref<Element> | undefined;
    }) => JSX.Element;
    TriggerIndicator: <T_3 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: any) => JSX.Element;
};

export { Tabs, TabsContext, TabsList, TabsListProps, TabsPanel, TabsPanelProps, TabsProps, TabsRoot, TabsTrigger, TabsTriggerIndicator, TabsTriggerIndicatorProps, TabsTriggerProps, Tabs as default, orientation, rect };
