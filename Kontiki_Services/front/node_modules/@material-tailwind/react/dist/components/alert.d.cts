import * as React from 'react';
import { SharedProps, BaseProps } from '../types/general.cjs';

interface AlertContextProps extends Omit<SharedProps, "size"> {
    open?: boolean;
    isPill?: boolean;
    setOpen?: React.Dispatch<React.SetStateAction<boolean>>;
}
declare const AlertContext: React.Context<AlertContextProps>;
type AlertProps<T extends React.ElementType = "div"> = BaseProps<T, {
    open?: boolean;
    isPill?: boolean;
    onOpenChange?: React.Dispatch<React.SetStateAction<boolean>>;
} & Omit<SharedProps, "size">>;
type AlertContentProps<T extends React.ElementType = "div"> = BaseProps<T>;
declare const AlertContent: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
type AlertIconProps<T extends React.ElementType = "span"> = BaseProps<T>;
declare const AlertIcon: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: any) => JSX.Element;
type AlertDismissTriggerProps<T extends React.ElementType = "button"> = BaseProps<T, {
    ripple?: boolean;
}>;
declare const AlertDismissTrigger: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: {
    ripple?: boolean | undefined;
} & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "ripple"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;
declare const Alert: (<T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
    open?: boolean | undefined;
    isPill?: boolean | undefined;
    onOpenChange?: React.Dispatch<React.SetStateAction<boolean>> | undefined;
} & Omit<SharedProps, "size"> & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "color" | "variant" | "open" | "isPill" | "onOpenChange"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element) & {
    Icon: <T_1 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: any) => JSX.Element;
    Content: <T_2 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
    DismissTrigger: <T_3 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: {
        ripple?: boolean | undefined;
    } & {
        as?: T_3 | undefined;
    } & Omit<React.PropsWithoutRef<React.ComponentProps<T_3>>, "as" | "ripple"> & {
        ref?: React.Ref<Element> | undefined;
    }) => JSX.Element;
};

export { Alert, AlertContent, AlertContentProps, AlertContext, AlertContextProps, AlertDismissTrigger, AlertDismissTriggerProps, AlertIcon, AlertIconProps, AlertProps, Alert as default };
