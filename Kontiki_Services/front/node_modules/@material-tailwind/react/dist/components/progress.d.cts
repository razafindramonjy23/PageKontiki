import * as React from 'react';
import { SharedProps, BaseProps } from '../types/general.cjs';

interface ProgressContextProps {
    value?: number;
    color?: SharedProps["color"];
}
declare const ProgressContext: React.Context<ProgressContextProps>;
type ProgressProps<T extends React.ElementType = "div"> = BaseProps<T, {
    value?: number;
} & Omit<SharedProps, "variant">>;
declare const ProgressRoot: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
    value?: number | undefined;
} & Omit<SharedProps, "variant"> & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "value" | "color" | "size"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;
type ProgressBarProps<T extends React.ElementType = "div"> = BaseProps<T>;
declare const ProgressBar: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
declare const Progress: (<T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
    value?: number | undefined;
} & Omit<SharedProps, "variant"> & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "value" | "color" | "size"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element) & {
    Bar: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: any) => JSX.Element;
};

export { Progress, ProgressBar, ProgressBarProps, ProgressContext, ProgressContextProps, ProgressProps, ProgressRoot, Progress as default };
