import * as React from 'react';
import { SharedProps, BaseProps } from '../types/general.cjs';

interface RadioContextProps {
    globalValue?: string;
    color?: SharedProps["color"];
    setGlobalValue?: (e: string) => void;
}
declare const RadioContext: React.Context<RadioContextProps>;
type RadioProps<T extends React.ElementType = "div"> = BaseProps<T, {
    value?: string;
    defaultValue?: string;
    color?: SharedProps["color"];
    onValueChange?: (e: string) => void;
    orientation?: "horizontal" | "vertical";
}>;
declare const RadioRoot: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
    value?: string | undefined;
    defaultValue?: string | undefined;
    color?: SharedProps["color"];
    onValueChange?: ((e: string) => void) | undefined;
    orientation?: "horizontal" | "vertical" | undefined;
} & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "value" | "defaultValue" | "onValueChange" | "color" | "orientation"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element;
type RadioItemProps<T extends React.ElementType = "input"> = Omit<BaseProps<T>, "as">;
declare const RadioItem: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "input">(props: RadioItemProps<T_1> & {
    ref?: React.Ref<HTMLLabelElement> | undefined;
}) => JSX.Element;
type RadioIndicatorProps<T extends React.ElementType = "span"> = BaseProps<T>;
declare const RadioIndicator: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: any) => JSX.Element;
declare const Radio: (<T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "div">(props: {
    value?: string | undefined;
    defaultValue?: string | undefined;
    color?: SharedProps["color"];
    onValueChange?: ((e: string) => void) | undefined;
    orientation?: "horizontal" | "vertical" | undefined;
} & {
    as?: T | undefined;
} & Omit<React.PropsWithoutRef<React.ComponentProps<T>>, "as" | "value" | "defaultValue" | "onValueChange" | "color" | "orientation"> & {
    ref?: React.Ref<Element> | undefined;
}) => JSX.Element) & {
    Item: <T extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "input">(props: RadioItemProps<T_1> & {
        ref?: React.Ref<HTMLLabelElement> | undefined;
    }) => JSX.Element;
    Indicator: <T_2 extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "span">(props: any) => JSX.Element;
};

export { Radio, RadioContext, RadioContextProps, RadioIndicator, RadioIndicatorProps, RadioItem, RadioItemProps, RadioProps, RadioRoot, Radio as default };
