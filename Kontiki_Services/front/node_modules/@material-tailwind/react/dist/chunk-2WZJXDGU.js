import {
  useTheme
} from "./chunk-FT445BB5.js";
import {
  badgeContentTheme,
  badgeIndicatorTheme,
  badgeTheme
} from "./chunk-IE76XHBV.js";

// src/components/badge.tsx
import * as React from "react";
import { twMerge } from "tailwind-merge";
import { jsx } from "react/jsx-runtime";
var BadgeContext = React.createContext({
  color: "primary",
  overlap: "square",
  placement: "top-end"
});
function BadgeRootBase({ as, color, overlap, placement, className, children, ...props }, ref) {
  const Component = as ?? "div";
  const contextTheme = useTheme();
  const theme = contextTheme?.badge ?? badgeTheme;
  const defaultProps = theme?.defaultProps;
  color ??= defaultProps?.color ?? "primary";
  overlap ??= defaultProps?.overlap ?? "square";
  placement ??= defaultProps?.placement ?? "top-end";
  const styles = twMerge(theme.baseStyle, className);
  const contextValue = React.useMemo(
    () => ({
      color,
      overlap,
      placement
    }),
    [color, overlap, placement]
  );
  return /* @__PURE__ */ jsx(Component, { ...props, ref, className: styles, children: /* @__PURE__ */ jsx(BadgeContext.Provider, { value: contextValue, children }) });
}
BadgeRootBase.displayName = "MaterialTailwind.Badge";
var BadgeRoot = React.forwardRef(BadgeRootBase);
function BadgeContentRoot({ as, className, children, ...props }, ref) {
  const Component = as ?? "div";
  const contextTheme = useTheme();
  const theme = contextTheme?.badgeContent ?? badgeContentTheme;
  const styles = twMerge(theme.baseStyle, className);
  return /* @__PURE__ */ jsx(Component, { ...props, ref, className: styles, children });
}
BadgeContentRoot.displayName = "MaterialTailwind.BadgeContent";
var BadgeContent = React.forwardRef(BadgeContentRoot);
function BadgeIndicatorRoot({ as, className, children, ...props }, ref) {
  const Component = as ?? "span";
  const contextTheme = useTheme();
  const { overlap, placement, color } = React.useContext(BadgeContext);
  const theme = contextTheme?.badgeIndicator ?? badgeIndicatorTheme;
  const styles = twMerge(
    theme.baseStyle,
    theme.color[color || "primary"],
    className
  );
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...props,
      ref,
      className: styles,
      "data-overlap": overlap,
      "data-placement": placement,
      children
    }
  );
}
BadgeIndicatorRoot.displayName = "MaterialTailwind.BadgeIndicator";
var BadgeIndicator = React.forwardRef(BadgeIndicatorRoot);
var Badge = Object.assign(BadgeRoot, {
  Content: BadgeContent,
  Indicator: BadgeIndicator
});
var badge_default = Badge;

export {
  BadgeContext,
  BadgeContent,
  BadgeIndicator,
  Badge,
  badge_default
};
