import {
  useTheme
} from "./chunk-FT445BB5.js";
import {
  iconButtonTheme
} from "./chunk-CO7SFVTO.js";

// src/components/icon-button.tsx
import * as React from "react";
import { twMerge } from "tailwind-merge";
import Ripple from "material-ripple-effects";
import { jsx } from "react/jsx-runtime";
function IconButtonRoot({
  as,
  color,
  variant,
  size,
  ripple,
  isCircular,
  className,
  children,
  ...props
}, ref) {
  const Component = as ?? "button";
  const contextTheme = useTheme();
  const theme = contextTheme?.iconButton ?? iconButtonTheme;
  const defaultProps = theme?.defaultProps;
  size ??= defaultProps?.size ?? "md";
  ripple ??= defaultProps?.ripple ?? true;
  color ??= defaultProps?.color ?? "primary";
  variant ??= defaultProps?.variant ?? "solid";
  isCircular ??= defaultProps?.isCircular ?? false;
  const rippleEffect = ripple !== void 0 && new Ripple();
  const handleClick = (e) => {
    const onClick = props?.onClick;
    const isDarkRipple = variant === "ghost" || color === "secondary";
    if (ripple) {
      rippleEffect.create(e, isDarkRipple ? "dark" : "light");
    }
    return typeof onClick === "function" && onClick(e);
  };
  const styles = twMerge(
    theme.baseStyle,
    theme["size"][size],
    theme["variant"][variant][color],
    className
  );
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...props,
      ref,
      className: styles,
      onClick: handleClick,
      "data-shape": isCircular ? "circular" : "default",
      children
    }
  );
}
IconButtonRoot.displayName = "MaterialTailwind.IconButton";
var IconButton = React.forwardRef(IconButtonRoot);
var icon_button_default = IconButton;

export {
  IconButton,
  icon_button_default
};
