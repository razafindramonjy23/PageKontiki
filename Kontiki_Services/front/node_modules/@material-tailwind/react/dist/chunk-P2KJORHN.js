import {
  useTheme
} from "./chunk-FT445BB5.js";
import {
  listItemEndTheme,
  listItemStartTheme,
  listItemTheme,
  listTheme
} from "./chunk-XUEVM6BT.js";

// src/components/list.tsx
import * as React from "react";
import { twMerge } from "tailwind-merge";
import Ripple from "material-ripple-effects";
import { jsx } from "react/jsx-runtime";
function ListRootBase({ as, className, children, ...props }, ref) {
  const Component = as ?? "ul";
  const contextTheme = useTheme();
  const theme = contextTheme?.list ?? listTheme;
  const styles = twMerge(theme.baseStyle, className);
  return /* @__PURE__ */ jsx(Component, { ...props, ref, className: styles, children });
}
ListRootBase.displayName = "MaterialTailwind.List";
var ListRoot = React.forwardRef(ListRootBase);
function ListItemRoot({
  as,
  className,
  disabled,
  selected,
  ripple,
  children,
  ...props
}, ref) {
  const Component = as ?? "li";
  const contextTheme = useTheme();
  const theme = contextTheme?.listItem ?? listItemTheme;
  const defaultProps = theme?.defaultProps;
  ripple ??= defaultProps?.ripple ?? true;
  const rippleEffect = ripple !== void 0 && new Ripple();
  const handleClick = (e) => {
    const onClick = props?.onClick;
    if (ripple) {
      rippleEffect.create(e, "dark");
    }
    return typeof onClick === "function" && onClick(e);
  };
  const styles = twMerge(theme.baseStyle, className);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...props,
      ref,
      className: styles,
      "data-selected": selected,
      "aria-disabled": disabled,
      onClick: handleClick,
      children
    }
  );
}
ListItemRoot.displayName = "MaterialTailwind.ListItem";
var ListItem = React.forwardRef(ListItemRoot);
function ListItemStartRoot({ as, className, disabled, children, ...props }, ref) {
  const Component = as ?? "span";
  const contextTheme = useTheme();
  const theme = contextTheme?.listItemStart ?? listItemStartTheme;
  const styles = twMerge(theme.baseStyle, className);
  return /* @__PURE__ */ jsx(Component, { ...props, ref, className: styles, children });
}
ListItemStartRoot.displayName = "MaterialTailwind.ListItemStart";
var ListItemStart = React.forwardRef(ListItemStartRoot);
function ListItemEndRoot({ as, className, disabled, children, ...props }, ref) {
  const Component = as ?? "span";
  const contextTheme = useTheme();
  const theme = contextTheme?.listItemEnd ?? listItemEndTheme;
  const styles = twMerge(theme.baseStyle, className);
  return /* @__PURE__ */ jsx(Component, { ...props, ref, className: styles, children });
}
ListItemEndRoot.displayName = "MaterialTailwind.ListItemEnd";
var ListItemEnd = React.forwardRef(ListItemEndRoot);
var List = Object.assign(ListRoot, {
  Item: ListItem,
  ItemStart: ListItemStart,
  ItemEnd: ListItemEnd
});
var list_default = List;

export {
  ListRoot,
  ListItem,
  ListItemStart,
  ListItemEnd,
  List,
  list_default
};
