import {
  useTheme
} from "./chunk-FT445BB5.js";
import {
  radioIndicatorTheme,
  radioItemTheme,
  radioTheme
} from "./chunk-R6IR6QGO.js";

// src/components/radio.tsx
import * as React from "react";
import { twMerge } from "tailwind-merge";
import { jsx, jsxs } from "react/jsx-runtime";
var RadioContext = React.createContext({
  globalValue: "",
  color: "primary",
  setGlobalValue: () => {
  }
});
function RadioRootBase({
  as,
  value,
  defaultValue,
  onValueChange,
  color,
  orientation,
  className,
  children,
  ...props
}, ref) {
  const Component = as || "div";
  const contextTheme = useTheme();
  const theme = contextTheme?.radio ?? radioTheme;
  const defaultProps = theme?.defaultProps;
  const [innerValue, setInnerValue] = React.useState(defaultValue || "");
  value ??= innerValue;
  onValueChange ??= setInnerValue;
  color ??= defaultProps?.color ?? "primary";
  orientation ??= defaultProps?.orientation ?? "vertical";
  const styles = twMerge(theme.baseStyle, className);
  const contextValue = React.useMemo(
    () => ({
      color,
      globalValue: value,
      setGlobalValue: onValueChange
    }),
    [color, value, onValueChange]
  );
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...props,
      ref,
      className: styles,
      "data-value": value,
      "data-orientation": orientation,
      children: /* @__PURE__ */ jsx(RadioContext.Provider, { value: contextValue, children })
    }
  );
}
RadioRootBase.displayName = "MaterialTailwind.Radio";
var RadioRoot = React.forwardRef(RadioRootBase);
function RadioItemRoot({ disabled, className, children, value, ...props }, ref) {
  const contextTheme = useTheme();
  const theme = contextTheme?.radioItem ?? radioItemTheme;
  const { globalValue, setGlobalValue, color } = React.useContext(RadioContext);
  const innerId = React.useId();
  const innerValue = React.useId();
  const mainValue = value || innerValue;
  const isChecked = globalValue === mainValue;
  const styles = twMerge(theme.baseStyle, theme.color[color], className);
  return /* @__PURE__ */ jsxs(
    "label",
    {
      ref,
      className: styles,
      "data-value": mainValue,
      "data-checked": isChecked,
      "aria-disabled": disabled,
      htmlFor: props?.id || innerId,
      children: [
        /* @__PURE__ */ jsx(
          "input",
          {
            ...props,
            id: props?.id || innerId,
            type: "radio",
            checked: isChecked,
            value: mainValue,
            onChange: (e) => {
              props?.onChange?.(e);
              setGlobalValue?.(mainValue);
            },
            style: { display: "none" }
          }
        ),
        children
      ]
    }
  );
}
RadioItemRoot.displayName = "MaterialTailwind.RadioItem";
var RadioItem = React.forwardRef(RadioItemRoot);
function RadioIndicatorRoot({ as, className, children, ...props }, ref) {
  const Component = as || "span";
  const contextTheme = useTheme();
  const theme = contextTheme?.radioIndicator ?? radioIndicatorTheme;
  const styles = twMerge(theme.baseStyle, className);
  return /* @__PURE__ */ jsx(Component, { ...props, className: styles, ref, children: children || /* @__PURE__ */ jsx(
    "svg",
    {
      width: "9px",
      height: "9px",
      viewBox: "0 0 22 22",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: /* @__PURE__ */ jsx(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M11 0.25C5.06294 0.25 0.25 5.06294 0.25 11C0.25 16.9371 5.06294 21.75 11 21.75C16.9371 21.75 21.75 16.9371 21.75 11C21.75 5.06294 16.9371 0.25 11 0.25Z",
          fill: "currentColor"
        }
      )
    }
  ) });
}
RadioIndicatorRoot.displayName = "MaterialTailwind.RadioIndicator";
var RadioIndicator = React.forwardRef(RadioIndicatorRoot);
var Radio = Object.assign(RadioRoot, {
  Item: RadioItem,
  Indicator: RadioIndicator
});
var radio_default = Radio;

export {
  RadioContext,
  RadioRoot,
  RadioItem,
  RadioIndicator,
  Radio,
  radio_default
};
