import {
  useTheme
} from "./chunk-FT445BB5.js";
import {
  accordionContentTheme,
  accordionItemTheme,
  accordionTheme,
  accordionTriggerTheme
} from "./chunk-T63Y5BBA.js";

// src/components/accordion.tsx
import * as React from "react";
import { twMerge } from "tailwind-merge";
import { jsx } from "react/jsx-runtime";
var AccordionContext = React.createContext({
  type: "single",
  activeItem: "",
  setActiveItem: () => {
  }
});
function AccordionRoot({
  type,
  value,
  defaultValue,
  onValueChange,
  children
}) {
  const contextTheme = useTheme();
  const theme = contextTheme.accordion || accordionTheme;
  const defaultProps = theme?.defaultProps;
  type ??= defaultProps?.type ?? "single";
  const accordionValue = value || defaultValue;
  const [uncontrolledActiveItem, setUncontrolledActiveItem] = React.useState("");
  const activeItem = value || uncontrolledActiveItem;
  const setActiveItem = onValueChange || setUncontrolledActiveItem;
  React.useEffect(() => {
    setActiveItem(accordionValue);
  }, [accordionValue]);
  const contextValue = React.useMemo(
    () => ({
      type,
      activeItem,
      setActiveItem
    }),
    [type, activeItem, setActiveItem]
  );
  return /* @__PURE__ */ jsx(AccordionContext.Provider, { value: contextValue, children });
}
AccordionRoot.displayName = "MaterialTailwind.Accordion";
var AccordionItemContext = React.createContext("");
function AccordionItemRoot({ as, value, disabled, className, children, ...props }, ref) {
  const Component = as || "div";
  const contextTheme = useTheme();
  const theme = contextTheme.accordionItem || accordionItemTheme;
  const defaultProps = theme?.defaultProps;
  const { type, activeItem } = React.useContext(AccordionContext);
  disabled ??= defaultProps?.disabled ?? false;
  const isMultiple = type === "multiple";
  const isOpen = isMultiple ? activeItem?.includes(value) : activeItem === value;
  const styles = twMerge(theme.baseStyle, className);
  return /* @__PURE__ */ jsx(AccordionItemContext.Provider, { value, children: /* @__PURE__ */ jsx(
    Component,
    {
      ...props,
      ref,
      "data-open": isOpen,
      className: styles,
      "aria-disabled": disabled,
      children
    }
  ) });
}
AccordionItemRoot.displayName = "MaterialTailwind.AccordionItem";
var AccordionItem = React.forwardRef(AccordionItemRoot);
function AccordionTriggerRoot({ as, className, children, ...props }, ref) {
  const Component = as || "button";
  const contextTheme = useTheme();
  const theme = contextTheme.accordionTrigger || accordionTriggerTheme;
  const value = React.useContext(AccordionItemContext);
  const { type, activeItem, setActiveItem } = React.useContext(AccordionContext);
  const isMultiple = type === "multiple";
  const isOpen = isMultiple ? activeItem?.includes(value) : activeItem === value;
  const styles = twMerge(theme.baseStyle, className);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...props,
      ref,
      "data-open": isOpen,
      className: styles,
      onClick: (event) => {
        if (isMultiple) {
          if (activeItem?.includes(value)) {
            setActiveItem?.(
              (prev) => prev.filter((item) => item !== value)
            );
          } else {
            setActiveItem?.((prev) => [...prev, value]);
          }
        } else {
          setActiveItem?.((prev) => prev === value ? "" : value);
        }
        props.onClick?.(event);
      },
      children
    }
  );
}
AccordionTriggerRoot.displayName = "MaterialTailwind.AccordionTrigger";
var AccordionTrigger = React.forwardRef(AccordionTriggerRoot);
function AccordionContentRoot({ as, className, children, ...props }, ref) {
  const Component = as || "div";
  const contextTheme = useTheme();
  const theme = contextTheme.accordionContent || accordionContentTheme;
  const value = React.useContext(AccordionItemContext);
  const { type, activeItem } = React.useContext(AccordionContext);
  const isMultiple = type === "multiple";
  const isOpen = isMultiple ? activeItem?.includes(value) : activeItem === value;
  const styles = twMerge(theme.baseStyle, className);
  return isOpen ? /* @__PURE__ */ jsx(Component, { ...props, ref, className: styles, "data-open": isOpen, children }) : null;
}
AccordionContentRoot.displayName = "MaterialTailwind.AccordionContent";
var AccordionContent = React.forwardRef(AccordionContentRoot);
var Accordion = Object.assign(AccordionRoot, {
  Item: AccordionItem,
  Trigger: AccordionTrigger,
  Content: AccordionContent
});
var accordion_default = Accordion;

export {
  AccordionContext,
  AccordionRoot,
  AccordionItemContext,
  AccordionItem,
  AccordionTrigger,
  AccordionContent,
  Accordion,
  accordion_default
};
