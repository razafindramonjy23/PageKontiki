import {
  useTheme
} from "./chunk-FT445BB5.js";
import {
  tabsListTheme,
  tabsPanelTheme,
  tabsTheme,
  tabsTriggerIndicatorTheme,
  tabsTriggerTheme
} from "./chunk-N5SHDOJU.js";

// src/components/tabs.tsx
import * as React from "react";
import { useMergeRefs } from "@floating-ui/react";
import { twMerge } from "tailwind-merge";
import { jsx } from "react/jsx-runtime";
var TabsContext = React.createContext({
  activeTab: "",
  orientation: "horizontal"
});
function TabsRootBase({
  as,
  value,
  defaultValue,
  onValueChange,
  orientation,
  className,
  children,
  ...props
}, ref) {
  const Component = as || "div";
  const contextTheme = useTheme();
  const theme = contextTheme.tabs || tabsTheme;
  const defaultProps = contextTheme.defaultProps;
  orientation ??= defaultProps?.orientation ?? "horizontal";
  const tabsValue = value || defaultValue;
  const [indicatorRect, setIndicatorRect] = React.useState({
    clientWidth: 0,
    clientHeight: 0,
    offsetLeft: 0,
    offsetTop: 0
  });
  const [uncontrolledActiveTab, setUncontrolledActiveTab] = React.useState(() => tabsValue);
  const activeTab = value || uncontrolledActiveTab;
  const setActiveTab = onValueChange || setUncontrolledActiveTab;
  React.useEffect(() => {
    setActiveTab(tabsValue);
  }, [tabsValue]);
  const contextValue = React.useMemo(
    () => ({
      orientation,
      activeTab,
      setActiveTab,
      indicatorRect,
      setIndicatorRect
    }),
    [orientation, activeTab, setActiveTab, indicatorRect, setIndicatorRect]
  );
  const styles = twMerge(theme.baseStyle, className);
  return /* @__PURE__ */ jsx(TabsContext.Provider, { value: contextValue, children: /* @__PURE__ */ jsx(
    Component,
    {
      ...props,
      ref,
      className: styles,
      "data-orientation": orientation,
      children
    }
  ) });
}
TabsRootBase.displayName = "MaterialTailwind.TabsRoot";
var TabsRoot = React.forwardRef(TabsRootBase);
function TabsListRoot({ as, className, children, ...props }, ref) {
  const Component = as || "div";
  const contextTheme = useTheme();
  const theme = contextTheme.tabsList || tabsListTheme;
  const { orientation } = React.useContext(TabsContext);
  const styles = twMerge(theme.baseStyle, className);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...props,
      ref,
      role: "tablist",
      className: styles,
      "aria-orientation": orientation,
      "data-orientation": orientation,
      children
    }
  );
}
TabsListRoot.displayName = "MaterialTailwind.TabsList";
var TabsList = React.forwardRef(TabsListRoot);
function TabsTriggerRoot({ as, value, className, children, ...props }, ref) {
  const Component = as || "button";
  const innerRef = React.useRef(null);
  const [elementRect, setElementRect] = React.useState(
    null
  );
  const contextTheme = useTheme();
  const theme = contextTheme.tabsTrigger || tabsTriggerTheme;
  const { activeTab, setActiveTab, setIndicatorRect } = React.useContext(TabsContext);
  const isActive = activeTab === value;
  const styles = twMerge(theme.baseStyle, className);
  const elementRef = useMergeRefs([innerRef, ref]);
  React.useEffect(() => {
    const element = innerRef.current;
    if (element) {
      setElementRect(element);
    }
  }, []);
  const handleIndicatorRect = React.useCallback(() => {
    if (isActive && elementRect) {
      setIndicatorRect?.({
        clientWidth: elementRect.clientWidth,
        clientHeight: elementRect.clientHeight,
        offsetLeft: elementRect.offsetLeft,
        offsetTop: elementRect.offsetTop
      });
    }
  }, [
    isActive,
    elementRect?.clientWidth,
    elementRect?.clientHeight,
    elementRect?.offsetLeft,
    elementRect?.offsetTop
  ]);
  React.useEffect(() => {
    handleIndicatorRect();
  }, [handleIndicatorRect]);
  React.useEffect(() => {
    window.addEventListener("resize", handleIndicatorRect);
    return () => {
      window.removeEventListener("resize", handleIndicatorRect);
    };
  }, [handleIndicatorRect]);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...props,
      ref: elementRef,
      role: "tab",
      className: styles,
      "data-active": isActive,
      "aria-selected": isActive,
      onClick: (event) => {
        props.onClick?.(event);
        setActiveTab?.(value);
      },
      children
    }
  );
}
TabsTriggerRoot.displayName = "MaterialTailwind.TabsTrigger";
var TabsTrigger = React.forwardRef(TabsTriggerRoot);
function TabsPanelRoot({ as, value, className, children, ...props }, ref) {
  const Component = as || "div";
  const contextTheme = useTheme();
  const theme = contextTheme.tabsPanel || tabsPanelTheme;
  const { activeTab, orientation } = React.useContext(TabsContext);
  const isActive = activeTab === value;
  const styles = twMerge(theme.baseStyle, className);
  return isActive ? /* @__PURE__ */ jsx(
    Component,
    {
      ...props,
      ref,
      role: "tabpanel",
      className: styles,
      "data-active": isActive,
      "data-orientation": orientation,
      children
    }
  ) : null;
}
TabsPanelRoot.displayName = "MaterialTailwind.TabsPanel";
var TabsPanel = React.forwardRef(TabsPanelRoot);
function TabsTriggerIndicatorRoot({ as, className, ...props }, ref) {
  const Component = as || "span";
  const contextTheme = useTheme();
  const theme = contextTheme.tabsTriggerIndicator || tabsTriggerIndicatorTheme;
  const { indicatorRect } = React.useContext(TabsContext);
  const styles = twMerge(theme.baseStyle, className);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...props,
      ref,
      style: {
        ...props?.style,
        width: indicatorRect?.clientWidth,
        height: indicatorRect?.clientHeight,
        left: indicatorRect?.offsetLeft,
        top: indicatorRect?.offsetTop,
        position: "absolute",
        zIndex: 1
      },
      className: styles
    }
  );
}
TabsTriggerIndicatorRoot.displayName = "MaterialTailwind.TabsTriggerIndicator";
var TabsTriggerIndicator = React.forwardRef(
  TabsTriggerIndicatorRoot
);
var Tabs = Object.assign(TabsRoot, {
  List: TabsList,
  Trigger: TabsTrigger,
  Panel: TabsPanel,
  TriggerIndicator: TabsTriggerIndicator
});
var tabs_default = Tabs;

export {
  TabsRoot,
  TabsList,
  TabsTrigger,
  TabsPanel,
  TabsTriggerIndicator,
  Tabs,
  tabs_default
};
