import {
  useTheme
} from "./chunk-FT445BB5.js";
import {
  alertContentTheme,
  alertDismissTriggerTheme,
  alertIconTheme,
  alertTheme
} from "./chunk-PMPU4UE3.js";

// src/components/alert.tsx
import * as React from "react";
import { twMerge } from "tailwind-merge";
import { jsx } from "react/jsx-runtime";
var AlertContext = React.createContext({
  color: "primary",
  variant: "solid",
  isPill: false,
  open: true,
  setOpen: () => {
  }
});
function AlertRootBase({
  as,
  color,
  variant,
  isPill,
  className,
  open: controlledOpen,
  onOpenChange: setControlledOpen,
  children,
  ...props
}, ref) {
  const Component = as ?? "div";
  const contextTheme = useTheme();
  const theme = contextTheme?.alert ?? alertTheme;
  const defaultProps = theme?.defaultProps;
  const [uncontrolledOpen, setUncontrolledOpen] = React.useState(true);
  const open = controlledOpen ?? uncontrolledOpen;
  const setOpen = setControlledOpen ?? setUncontrolledOpen;
  color ??= defaultProps?.color ?? "primary";
  variant ??= defaultProps?.variant ?? "solid";
  isPill ??= defaultProps?.isPill ?? false;
  const styles = twMerge(
    theme.baseStyle,
    theme["variant"][variant][color],
    className
  );
  const contextValue = React.useMemo(
    () => ({
      color,
      variant,
      isPill,
      open,
      setOpen
    }),
    [color, variant, isPill, open, setOpen]
  );
  return open ? /* @__PURE__ */ jsx(
    Component,
    {
      ...props,
      ref,
      role: "alert",
      "data-open": open,
      "data-pill": isPill,
      className: styles,
      children: /* @__PURE__ */ jsx(AlertContext.Provider, { value: contextValue, children })
    }
  ) : null;
}
AlertRootBase.displayName = "MaterialTailwind.Alert";
var AlertRoot = React.forwardRef(AlertRootBase);
function AlertContentRoot({ as, className, children, ...props }, ref) {
  const Component = as ?? "div";
  const contextTheme = useTheme();
  const theme = contextTheme?.alertContent ?? alertContentTheme;
  const styles = twMerge(theme.baseStyle, className);
  return /* @__PURE__ */ jsx(Component, { ...props, ref, className: styles, children });
}
AlertContentRoot.displayName = "MaterialTailwind.AlertContent";
var AlertContent = React.forwardRef(AlertContentRoot);
function AlertIconRoot({ as, className, children, ...props }, ref) {
  const Component = as ?? "span";
  const contextTheme = useTheme();
  const theme = contextTheme?.alertIcon ?? alertIconTheme;
  const styles = twMerge(theme.baseStyle, className);
  return /* @__PURE__ */ jsx(Component, { ...props, ref, className: styles, children });
}
AlertIconRoot.displayName = "MaterialTailwind.AlertIcon";
var AlertIcon = React.forwardRef(AlertIconRoot);
function AlertDismissTriggerRoot({ as, ripple, className, children, ...props }, ref) {
  const Component = as ?? "button";
  const contextTheme = useTheme();
  const { setOpen } = React.useContext(AlertContext);
  const theme = contextTheme?.alertDismissTrigger ?? alertDismissTriggerTheme;
  const styles = children ? className : twMerge(theme.baseStyle, className);
  function closeAlert(event) {
    setOpen?.(false);
    props.onClick?.(event);
  }
  return /* @__PURE__ */ jsx(Component, { ...props, ref, className: styles, onClick: closeAlert, children: children || /* @__PURE__ */ jsx(
    "svg",
    {
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      color: "currentColor",
      className: "m-1 h-5 w-5 stroke-2",
      children: /* @__PURE__ */ jsx(
        "path",
        {
          d: "M6.75827 17.2426L12.0009 12M17.2435 6.75736L12.0009 12M12.0009 12L6.75827 6.75736M12.0009 12L17.2435 17.2426",
          stroke: "currentColor",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      )
    }
  ) });
}
AlertDismissTriggerRoot.displayName = "MaterialTailwind.AlertDismissTrigger";
var AlertDismissTrigger = React.forwardRef(
  AlertDismissTriggerRoot
);
var Alert = Object.assign(AlertRoot, {
  Icon: AlertIcon,
  Content: AlertContent,
  DismissTrigger: AlertDismissTrigger
});
var alert_default = Alert;

export {
  AlertContext,
  AlertContent,
  AlertIcon,
  AlertDismissTrigger,
  Alert,
  alert_default
};
