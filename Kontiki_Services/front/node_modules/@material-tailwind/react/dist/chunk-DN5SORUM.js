import {
  useTheme
} from "./chunk-FT445BB5.js";
import {
  dialogContentTheme,
  dialogDismissTriggerTheme,
  dialogOverlayTheme,
  dialogTheme,
  dialogTriggerTheme
} from "./chunk-DWFTZS5L.js";

// src/components/dialog.tsx
import * as React from "react";
import {
  FloatingPortal,
  FloatingOverlay,
  FloatingFocusManager
} from "@floating-ui/react";
import {
  useFloating,
  useClick,
  useDismiss,
  useRole,
  useInteractions,
  useMergeRefs
} from "@floating-ui/react";
import { twMerge } from "tailwind-merge";
import { jsx } from "react/jsx-runtime";
var DialogContext = React.createContext({
  open: false,
  setOpen: () => {
  }
});
function DialogRoot({
  size,
  open: controlledOpen,
  onOpenChange: setControlledOpen,
  children
}) {
  const contextTheme = useTheme();
  const theme = contextTheme?.dialog ?? dialogTheme;
  const defaultProps = theme?.defaultProps;
  const [uncontrolledOpen, setUncontrolledOpen] = React.useState(false);
  const open = controlledOpen ?? uncontrolledOpen;
  const setOpen = setControlledOpen ?? setUncontrolledOpen;
  size ??= defaultProps?.size ?? "md";
  const data = useFloating({
    open,
    onOpenChange: setOpen
  });
  const { context } = data;
  const click = useClick(context, {
    enabled: controlledOpen == null
  });
  const dismiss = useDismiss(context, { outsidePressEvent: "mousedown" });
  const role = useRole(context);
  const interactions = useInteractions([click, dismiss, role]);
  const contextValue = React.useMemo(
    () => ({
      open,
      setOpen,
      size,
      ...interactions,
      ...data
    }),
    [open, setOpen, size, interactions, data]
  );
  return /* @__PURE__ */ jsx(DialogContext.Provider, { value: contextValue, children });
}
DialogRoot.displayName = "MaterialTailwind.Dialog";
function DialogTriggerRoot({ as, className, children, ...props }, ref) {
  const Component = as || "button";
  const contextTheme = useTheme();
  const theme = contextTheme?.dialogTrigger ?? dialogTriggerTheme;
  const { refs, getReferenceProps, open } = React.useContext(DialogContext);
  const styles = twMerge(theme.baseStyle, className);
  const elementRef = useMergeRefs([refs?.setReference, ref]);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...props,
      ref: elementRef,
      "data-open": open,
      className: styles,
      ...getReferenceProps && getReferenceProps(),
      children
    }
  );
}
DialogTriggerRoot.displayName = "MaterialTailwind.DialogTrigger";
var DialogTrigger = React.forwardRef(DialogTriggerRoot);
function DialogOverlayRoot({ className, lockScroll, children, ...props }, ref) {
  const contextTheme = useTheme();
  const theme = contextTheme?.dialogOverlay ?? dialogOverlayTheme;
  const defaultProps = theme?.defaultProps;
  const { open } = React.useContext(DialogContext);
  lockScroll ??= defaultProps?.lockScroll ?? true;
  const styles = twMerge(theme.baseStyle, className);
  return open ? /* @__PURE__ */ jsx(FloatingPortal, { children: /* @__PURE__ */ jsx(
    FloatingOverlay,
    {
      ...props,
      ref,
      "data-open": open,
      className: styles,
      lockScroll,
      children
    }
  ) }) : null;
}
DialogOverlayRoot.displayName = "MaterialTailwind.DialogOverlay";
var DialogOverlay = React.forwardRef(DialogOverlayRoot);
function DialogContentRoot({
  as,
  className,
  children,
  disabled,
  initialFocus,
  returnFocus,
  guards,
  modal,
  visuallyHiddenDismiss,
  closeOnFocusOut,
  order,
  ...props
}, ref) {
  const Component = as || "div";
  const contextTheme = useTheme();
  const theme = contextTheme?.dialogContent ?? dialogContentTheme;
  const defaultProps = theme.defaultProps;
  const { context, refs, getFloatingProps, open, size } = React.useContext(DialogContext);
  disabled ??= defaultProps?.disabled ?? false;
  initialFocus ??= defaultProps?.initialFocus ?? 0;
  returnFocus ??= defaultProps?.returnFocus ?? true;
  guards ??= defaultProps?.guards ?? true;
  modal ??= defaultProps?.modal ?? false;
  visuallyHiddenDismiss ??= defaultProps?.visuallyHiddenDismiss ?? true;
  closeOnFocusOut ??= defaultProps?.closeOnFocusOut ?? true;
  order ??= defaultProps?.order ?? ["content"];
  const styles = twMerge(theme.baseStyle, theme.size[size], className);
  const elementRef = useMergeRefs([refs?.setFloating, ref]);
  return open ? /* @__PURE__ */ jsx(
    FloatingFocusManager,
    {
      order,
      modal,
      guards,
      disabled,
      returnFocus,
      initialFocus,
      closeOnFocusOut,
      visuallyHiddenDismiss,
      context,
      children: /* @__PURE__ */ jsx(
        Component,
        {
          ...props,
          ref: elementRef,
          "data-open": open,
          className: styles,
          ...getFloatingProps && getFloatingProps(),
          children
        }
      )
    }
  ) : null;
}
DialogContentRoot.displayName = "MaterialTailwind.DialogContent";
var DialogContent = React.forwardRef(DialogContentRoot);
function DialogDismissTriggerRoot({ as, className, children, ...props }, ref) {
  const Component = as || "button";
  const contextTheme = useTheme();
  const theme = contextTheme?.dialogDismissTrigger ?? dialogDismissTriggerTheme;
  const { open, setOpen } = React.useContext(DialogContext);
  const styles = twMerge(theme.baseStyle, className);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...props,
      ref,
      "data-open": open,
      className: styles,
      onClick: (event) => {
        props.onClick?.(event);
        if (setOpen) {
          setOpen(false);
        }
      },
      children
    }
  );
}
DialogDismissTriggerRoot.displayName = "MaterialTailwind.DialogDismissTrigger";
var DialogDismissTrigger = React.forwardRef(
  DialogDismissTriggerRoot
);
var Dialog = Object.assign(DialogRoot, {
  Trigger: DialogTrigger,
  Overlay: DialogOverlay,
  Content: DialogContent,
  DismissTrigger: DialogDismissTrigger
});
var dialog_default = Dialog;

export {
  DialogRoot,
  DialogTrigger,
  DialogOverlay,
  DialogContent,
  DialogDismissTrigger,
  Dialog,
  dialog_default
};
