/**
 * ranger
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
type RangerChangeEvent<TTrackElement> = (instance: Ranger<TTrackElement>) => void;
type RangerInterpolator = {
    getPercentageForValue: (val: number, min: number, max: number) => number;
    getValueForClientX: (clientX: number, trackDims: {
        width: number;
        left: number;
    }, min: number, max: number) => number;
};
type RangerClassConfig<TTrackElement = unknown> = {
    getRangerElement: () => TTrackElement | null;
    values: ReadonlyArray<number>;
    min: number;
    max: number;
    tickSize: number;
    ticks?: ReadonlyArray<number>;
    interpolator: RangerInterpolator;
    onChange: RangerChangeEvent<TTrackElement>;
    onDrag?: RangerChangeEvent<TTrackElement>;
    rerender: () => void;
    debug: boolean;
} & ({
    stepSize: number;
} | {
    steps: ReadonlyArray<number>;
});
type RangerConfig<TTrackElement = unknown> = Omit<RangerClassConfig<TTrackElement>, 'tickSize' | 'interpolator' | 'onChange' | 'debug'> & {
    tickSize?: number;
    interpolator?: RangerInterpolator;
    onChange?: RangerChangeEvent<TTrackElement>;
    debug?: boolean;
} & ({
    stepSize: number;
} | {
    steps: ReadonlyArray<number>;
});
type RangerOptions<TTrackElement = unknown> = Omit<RangerConfig<TTrackElement>, 'rerender'> & ({
    stepSize: number;
} | {
    steps: ReadonlyArray<number>;
});
declare class Ranger<TTrackElement = unknown> {
    activeHandleIndex: number | undefined;
    tempValues: ReadonlyArray<number> | undefined;
    sortedValues: ReadonlyArray<number>;
    options: RangerClassConfig<TTrackElement>;
    private rangerElement;
    constructor(opts: RangerConfig<TTrackElement>);
    setOptions(opts: RangerConfig<TTrackElement>): void;
    _willUpdate: () => void;
    getValueForClientX: (clientX: number) => number;
    getNextStep: (val: number, direction: number) => number;
    roundToStep: (val: number) => number;
    handleDrag: (e: any) => void;
    handleKeyDown: (e: KeyboardEvent, i: number) => void;
    handlePress: (_e: any, i: number) => void;
    getPercentageForValue: (val: number) => number;
    getTicks: () => {
        value: number;
        key: number;
        percentage: number;
    }[];
    getSteps: () => {
        left: number;
        width: number;
    }[];
    handles: () => {
        value: number;
        isActive: boolean;
        onKeyDownHandler: (e: any) => void;
        onMouseDownHandler: (e: any) => void;
        onTouchStart: (e: any) => void;
    }[];
}

export { Ranger, RangerChangeEvent, RangerClassConfig, RangerConfig, RangerInterpolator, RangerOptions };
